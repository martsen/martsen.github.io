---
layout: post
title: "Установка ASP.NET vNext на OSX и Linux"
date: 2014-05-27 22:29:41.000000000 +04:00
---
###Что за зверь такой ASP.NET vNext?

Недавно Microsoft объявил о новой итерации платформы ASP.NET. Можно выделить два важных момента.

Во-первых ASP.NET полностью ушел в open source. Все могут пойти и посмотреть [исходники](https://github.com/aspnet).

Во-вторых vNext является кроссплатформенным решением и теперь его можно запускать не только на Windows (прощай IIS). Во время презентации было объявлено, что Mono официально включена в цикл сборок инженерами Microsoft.

###Настройка OSX и Linux для запуска ASP.NET vNext

Для запуска vNext приложений нам потребуется Mono и так называемая "K Runtime Environment" (KRE).

Первым шагом надо поставить Mono. Она всегда в процессе "допиливания" и поэтому сейчас активно идет внедрение стека ASP.NET. Поэтому для надежности лучше всего будет собрать Mono из исходников со всеми последними плюшками.

Вторым шагом необходимо установить KRE. Она является CLI средой, где будет крутиться vNext приложение.

Установка KRE осуществляется при помощи "K Version Manager" (KVM). Это простое приложение, которое может устанавливать множество версий KRE вместе друг с другом. Например, появляется возможность запускать и тестировать приложения на разных версиях .NET (и Mono). Т.е. по сути теперь можно исполняемую среду устанавливать как пакет. Ждем плагинов в NuGet.

###Сборка Mono

На самом деле этот процесс детально описан во многих статьях и их легко можно найти в интернете, поэтому я не буду заострять на этом свое внимание.

* Установите Mono по инструкции с [официальной страницы проекта](https://github.com/mono/mono)
* На системе должны быть установлены autoconf libtool
* Необходимо, чтобы была установлена предыдущая версия Mono (она соберет новую версию)
* На некоторых дистрибутивах Linux вам возможно потребуется выполнить следущие команды

<pre><code>sudo certmgr -ssl -m https://go.microsoft.com
sudo certmgr -ssl -m https://nugetgallery.blob.core.windows.net
sudo certmgr -ssl -m https://nuget.org</code></pre>

* Для пользователей Linux необходимо выполнить `mozroots --import --sync` после установки, чтобы предотвратить возможные проблемы с сертификатами
* Для пользовать OSX необходимо отредактировать `/private/etc/paths` и удалить строку `/usr/local/bin` перед `/usr/bin`, чтобы ОС искала новую версию.

*Это может повредить вашей системе. Если вы не уверены в совершаемых действиях, то лучше подождите официальный релиз от Mono.*

После всего вышепроделанного, запустите `mono --version`. Вы должны увидеть версию Mono 3.4.1 или новее. На версии 3.4.0 вы не сможете запустить приложения. Они буду падать с ошибкой `Could not load type 'System.Reflection.Internal.MemoryMappedFileBlock' from assembly...`

![](http://habrastorage.org/files/f69/80f/445/f6980f445431418bab5fdeae5e57dbf4.png)

Если у вас не получилось, то проверьте переменную среды `$PATH`.

###Установка KVM и K Runtime Environment

Установка KVM крайне проста. Она может быть установлена на системам Linux и OSX всего одной строкой

<pre><code>curl https://raw.githubusercontent.com/graemechristie/Home/KvmShellImplementation/kvmsetup.sh | sh && source ~/.kre/kvm/kvm.sh && kvm upgrade</code></pre>

Эта строка сделает следующее:

* скачает `kvm.sh` и сохранит его в `~/.kre/kvm/kvm.sh`.
* добавит в автозапуск kvm.sh при каждом заходе в систему в bash/zsh.
* `kvm.sh` затем будет запущена и добавлена в текущий шел.
* запустит `kvm upgrade`. Эта команда скачает последнею версию пакета KRE, распакует его в `.kre/packages` и добавит папку `bin` в `$PATH`.

После этого в CLI будут доступны команды KRE. Это будут команды `k`, которая используется для запуска ASP.NET vNext проектов, и комада `kpm` для управления пакетами.

Команда kvm может также позволить установить вместе разные версии KRE, переключаться между ними и т.д. Более подробно можно посмотреть на [ASP.NET Home Project Readme](https://github.com/aspnet/home).

###Создаем простой проект

Давайте сделаем папку HelloWorld и создадим в ней файл
`project.json`. В нем идет описание проекта. Вставьте в него следующий код

<pre><code>{
	"dependencies": {
	"System.Console": "4.0.0.0"
	},
	"configurations": {
	"net45": {},
	"k10": {}
	}
}</code></pre>

Сделаем файл `Program.cs` в той же папке

<pre><code>using System;

public class Program
{
	public static void Main()
	{
		Console.WriteLine("Hello World !");
	}
}</code></pre>

Введите `kpm restore -s https://www.myget.org/F/aspnetvnext/`.  Эта команда восстановит все необходимые зависимости, которые прописаны в `project.json`, а именно `System.Console`.

![](http://beta.hstor.org/files/758/00e/41d/75800e41dd4e467cbbe3519dcafb8c0e.png)

После этого введите `k run.`

![](http://beta.hstor.org/files/ee8/7c4/272/ee87c4272f2449bca5b0a2df8e8eb7f0.png)

Процесс отладки можно включить при помощи ключа `export KRE_TRACE=1`.

![](http://beta.hstor.org/files/0b1/acc/d1f/0b1accd1fe0047b3ba6a5227318ab5c8.png)

###Вместо заключения

Microsoft сделала сильный ход, когда выпустила свою основную web платформу в open source. Также не стоит забывать, что и другие проекты стали теперь открытыми (Entity Framework, Roslyn...). На данный момент идет развитие vNext и где-то через полгода или год уже можно говорить о какой-то стабильности (ждем бинарники Mono 3.4.1+). Пока это не больше чем игрушка.

Пока непонятно, сможет ли vNext откусить долю рынка у других кроссплатформенных решений для web (php, RoR, node.js, Java...), но если будет грамотная интеграция в облако Azure с хорошими бонусами, то будет не все потеряно.



*Текст подготовлен по статьям с MSDN, записей докладов с конференции Build и [статье](http://graemechristie.github.io/graemechristie/blog/2014/05/26/asp-dot-net-vnext-on-osx-and-linux/) Graeme Christie.*
